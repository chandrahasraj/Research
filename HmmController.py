'''
Created on Sep 4, 2015

@author: chandra
'''

from ghmm import *


def base10toN(num, base):
    """Change ``num'' to given base
    Upto base 36 is supported."""

    converted_string, modstring = "", ""
    currentnum = num
    if not 1 < base < 37:
        raise ValueError("base must be between 2 and 36")
    if not num:
        return '0'
    while currentnum:
        mod = currentnum % base
        currentnum = currentnum // base
        converted_string = chr(48 + mod + 7*(mod > 10)) + converted_string
    if len(converted_string)==1:
        converted_string="0 0 "+converted_string
    if len(converted_string)==2:
        converted_string="0 "+converted_string[:1]+" "+converted_string[1:2]
    if len(converted_string)==3:
        converted_string=converted_string[:1]+" "+converted_string[1:2]+" "+converted_string[2:]
    return converted_string

def re(arr):
    j=0;
    for i in range(len(arr)):
        if i>=5 :
            val=base10toN(j, 3)
            arr[i]=str(val+"["+str(arr[i]).replace(",", "")+"]")
            j=j+1
    return arr

#two states
#A = [[0.9, 0.1], [0.3, 0.7]]
#B = [[0.2,0.1,0.07,0.08,0.08,0.07,0.05,0.15,0.2],[0.15,0.08,0.07,0.1,0.08,0.07,0.1,0.10,0.25]]
#pi = [0.5] *2
#three states
#A = [[0.7, 0.1,0.3], [0.3, 0.4,0.3],[0.2, 0.6,0.2]]
#B=[[0.0043763677,0.03501094,0.008752735,0.048140045,0.024070023,0.032822758,0.032822758,0.030634573,0.054704595,0.052516412,0.054704595,0.0065645515,0.024070023,0.054704595,0.04157549,0.008752735,0.052516412,0.059080962,0.05032823,0.04595186,0.04157549,0.030634573,0.021881837,0.052516412,0.059080962,0.052516412,0.019693654],
#     [0.016304348,0.054347824,0.051630434,0.032608695,0.029891305,0.051630434,0.046195652,0.04076087,0.07336956,0.032608695,0.06793478,0.07065217,0.032608695,0.04076087,0.07065217,0.008152174,0.008152174,0.0027173914,0.032608695,0.008152174,0.051630434,0.05978261,0.013586956,0.008152174,0.054347824,0.019021738,0.02173913],
#     [0.042979944,0.074498564,0.020057306,0.0114613185,0.022922637,0.0114613185,0.04011461,0.074498564,0.008595988,0.028653296,0.028653296,0.034383953,0.045845274,0.031518623,0.037249282,0.028653296,0.0028653296,0.048710603,0.048710603,0.0028653296,0.008595988,0.07736389,0.051575933,0.065902576,0.06303725,0.048710603,0.04011461]]
#pi = [0.3,0.3,0.4]
#four states
A = [[0.4,0.4, 0.1,0.1], [0.3, 0.1,0.4,0.2],[0.2,0.1,0.4,0.3],[0.5, 0.1,0.2,0.2]]
B = [[0.03508772,0.046783626,0.023391813,0.020467836,0.078947365,0.032163743,0.07017544,0.05263158,0.020467836,0.03508772,0.058479533,0.04385965,0.014619883,0.0058479533,0.07017544,0.07602339,0.0058479533,0.046783626,0.02631579,0.01754386,0.0116959065,0.03508772,0.04385965,0.023391813,0.049707603,0.04385965,0.0116959065],
     [0.003533569,0.024734983,0.021201413,0.08480565,0.024734983,0.038869258,0.024734983,0.038869258,0.010600707,0.017667845,0.088339224,0.028268551,0.014134276,0.007067138,0.038869258,0.010600707,0.088339224,0.056537103,0.017667845,0.007067138,0.024734983,0.09540636,0.049469966,0.028268551,0.028268551,0.06713781,0.06007067],
     [0.016470589,0.056470588,0.037647057,0.06352941,0.011764706,0.049411766,0.054117646,0.03529412,0.051764704,0.0070588235,0.014117647,0.030588236,0.056470588,0.030588236,0.056470588,0.030588236,0.016470589,0.02117647,0.049411766,0.018823529,0.05882353,0.028235294,0.05882353,0.025882352,0.05882353,0.009411764,0.051764704],
     [0.01897019,0.06775068,0.029810298,0.0054200543,0.02710027,0.05691057,0.035230353,0.04607046,0.0054200543,0.04607046,0.05420054,0.029810298,0.04607046,0.040650405,0.0027100272,0.01897019,0.021680217,0.043360434,0.05691057,0.016260162,0.010840109,0.06504065,0.05420054,0.059620596,0.01897019,0.062330622,0.059620596]]
pi = [0.3,0.3,0.2,0.2]
#five states
#A = [[0.4,0.2,0.2, 0.1,0.1], [0.3, 0.1,0.31,0.09,0.2],[0.2,0.1,0.12,0.28,0.3],[0.35,0.15, 0.1,0.2,0.2],[0.25,0.25, 0.1,0.2,0.2]]
#B = [[0.04,0.01,0.01,0.06,0.05,0.03,0.02,0.04,0.06,0.04,0.01,0.01,0.06,0.05,0.03,0.02,0.04,0.060,0.04,0.03,0.01,0.06,0.05,0.03,0.04,0.04,0.06],
#     [0.015,0.005,0.07,0.01,0.03,0.07,0.01,0.02,0.09,0.015,0.005,0.07,0.01,0.03,0.07,0.01,0.02,0.09,0.015,0.005,0.07,0.05,0.03,0.07,0.01,0.02,0.09],
#     p1,
#     [0.02,0.01,0.04,0.03,0.06,0.05,0.07,0.01,0.03,0.02,0.01,0.04,0.03,0.06,0.05,0.07,0.01,0.03,0.02,0.01,0.04,0.03,0.06,0.05,0.07,0.04,0.04],
#     [0.02,0.01,0.04,0.04,0.02,0.09,0.06,0.01,0.03,0.02,0.01,0.04,0.03,0.06,0.04,0.08,0.01,0.03,0.02,0.01,0.04,0.03,0.06,0.08,0.04,0.05,0.03]]
#pi = [0.2,0.2,0.2,0.2,0.2] 
sigma = IntegerRange(0,27)
m = HMMFromMatrices(sigma, DiscreteDistribution(sigma), A, B, pi)
file_location="/home/chandra/Documents/200611d.seq"
#print m
#file = open('/home/chandra/Documents/sseqf.seq','r')
file_read = open(file_location,'r')
observations=[]
observations=file_read.readline().split(",")
values=[int(x) for x in observations if x.isdigit()]
train_seq=EmissionSequence(sigma,values)
m.baumWelch(train_seq)
abc=str(m);
pp=[]
inner2=[]
inner5=[]
inner7=[]
inner11=[]
pp=abc.split("\n")
inner2=filter(None,re(pp[2].split(" ")))
inner5=filter(None,re(pp[5].split(" ")))
inner7=filter(None,re(pp[8].split(" ")))
inner11=filter(None,re(pp[11].split(" ")))

pp[2]=','.join(inner2)
pp[5]=','.join(inner5)
pp[8]=','.join(inner7)
pp[11]=','.join(inner11)

print "[AD,AK,D]"
for st in pp:
    print st
    
#v=m.viterbi(train_seq)
#print v


